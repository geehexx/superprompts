[tool.poetry]
name = "superprompts"
version = "1.0.0"
description = "A collection of reusable AI prompts with MCP server for easy access"
authors = ["SuperPrompts Team"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/your-org/superprompts"
repository = "https://github.com/your-org/superprompts"
documentation = "https://github.com/your-org/superprompts#readme"
keywords = ["ai", "prompts", "mcp", "server"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Markup :: Markdown",
]

[tool.poetry.dependencies]
python = "^3.10"
mcp = "^1.0.0"
pydantic = "^2.0.0"
click = "^8.0.0"
rich = "^13.0.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.0.0"
pytest-asyncio = "^0.21.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
pyyaml = "^6.0.1"
jsonschema = "^4.23.0"
pymarkdownlnt = "^0.9.22"
ruff = "^0.13.0"
nox = "^2025.5.1"
invoke = "^2.2.0"

[tool.poetry.scripts]
superprompts = "superprompts.cli.main:main"
superprompts-server = "superprompts.mcp.server:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["superprompts"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
asyncio_mode = "auto"

[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-args
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q",  # flake8-quotes
    "N",  # pep8-naming
    "D",  # pydocstyle
    "S",  # flake8-bandit
    "T20", # flake8-print
    "RET", # flake8-return
    "PIE", # flake8-pie
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "RUF", # ruff-specific rules
]
ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in __init__
    "S101", # Use of assert detected
    "PLR0913", # Too many arguments to function call
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "COM812", # Missing trailing comma
    "ISC001", # Implicitly concatenated string literals
]

[tool.ruff.per-file-ignores]
"tests/*" = ["S101", "PLR2004", "ARG", "FBT"]
"scripts/*" = ["T20", "PLR0913", "PLR0912"]

[tool.ruff.isort]
known-first-party = ["superprompts"]
force-single-line = false

[tool.ruff.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"

[tool.ruff.flake8-annotations]
allow-star-arg-any = true